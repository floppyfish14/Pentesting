#!/usr/bin/python env
#Print readable strings of executable files
#Useful when you dont have strings progam from binutils. Trust me, happens more often than you would think.
from __future__ import print_function

import string
from sys import argv,stdout

#make sure strings are greater than 4 characters long
def strings(filename, min=4):
    with open(filename, "rb") as f: #rb = read, b tells python that it is a binary file
        result = ""
        for c in f.read():
            if c in string.printable: #if it is a printable byte add it to the result
                result += c
                continue
            if len(result) >= min:
                yield result
                """yield for memory's sake. Yield releases the data from the programs memory after it has executed.
                   Good to have so you don't use too much memory on the server if it's a big executable."""
            result = ""
        if len(result) >= min:
            yield result

#make sure you have enough arguments            
if len(argv) < 2:
    print("Usage: %s [executable]" % (argv[0]))
    exit(1)

filename = argv[1]

#print the strings
for s in strings(filename):
    print("%s" % s)
